
<h2>@ViewBag.Title</h2>
<h3>@ViewBag.Message</h3>

<p>Use this area to provide additional information.</p>

@Html.EJS().Grid("FormulaGrid").DataSource(ds => ds.Json(ViewBag.datasource).UpdateUrl("/TestGrid2/SrcUpdate").InsertUrl("/TestGrid2/SrcInsert").RemoveUrl("/TestGrid2/SrcRemove").Adaptor("RemoteSaveAdaptor")).Columns(col =>
{
        col.Field("RowKey").IsPrimaryKey(true).Visible(false).Add();
        col.Field("PartitionKey").Visible(false).Add();
        col.Field("sourceResourceId").Add();
        col.Field("imagesLocation").Add();
        col.Field("imagesResourceGroup").Add();
        col.Field("imagePrefix").Add();
        col.Field("imageVersion").Add();

}).AllowPaging().FilterSettings(filter => { filter.Type(Syncfusion.EJ2.Grids.FilterType.Menu); }).EditSettings(edit => { edit.AllowAdding(true).AllowEditing(true).AllowDeleting(true).ShowDeleteConfirmDialog(true); }).Toolbar(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" }).Render()


@*}).AllowPaging().Toolbar(new List<string>
    () { "Search" , "Add", "Edit", "Delete", "Update", "Cancel" , "ExcelExport", "CsvExport"}).FilterSettings(filter => { filter.Type(Syncfusion.EJ2.Grids.FilterType.Menu); }).ToolbarClick("toolbarclick").Render()*@

    <script>
        function toolbarclick(args) {
            if (args.item.id === this.element.id + ' _csvexport') {
                this.csvExport();
            }
            if (args.item.id === this.element.id + '_excelexport') {
                this.excelExport();
            }
        }
    </script>

